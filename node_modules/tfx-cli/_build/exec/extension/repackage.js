"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var merger_1 = require("./_lib/merger");
var vsix_manifest_builder_1 = require("./_lib/vsix-manifest-builder");
var vsix_writer_1 = require("./_lib/vsix-writer");
var _ = require("lodash");
var colors = require("colors");
var extBase = require("./default");
var Q = require("q");
var qfs = require("../../lib/qfs");
var trace = require("../../lib/trace");
var xml2js = require("xml2js");
var zip = require("jszip");
function getCommand(args) {
    return new ExtensionRepackage(args);
}
exports.getCommand = getCommand;
function createExtension(mergeSettings, packageSettings) {
    return new merger_1.Merger(mergeSettings).merge().then(function (components) {
        return new vsix_writer_1.VsixWriter(packageSettings, components).writeVsix().then(function (outPath) {
            var vsixBuilders = components.builders.filter(function (b) { return b.getType() === vsix_manifest_builder_1.VsixManifestBuilder.manifestType; });
            var vsixBuilder;
            if (vsixBuilders.length > 0) {
                vsixBuilder = vsixBuilders[0];
            }
            return {
                path: outPath,
                extensionId: vsixBuilder ? vsixBuilder.getExtensionId() : null,
                publisher: vsixBuilder ? vsixBuilder.getExtensionPublisher() : null
            };
        });
    });
}
exports.createExtension = createExtension;
var ExtensionRepackage = (function (_super) {
    __extends(ExtensionRepackage, _super);
    function ExtensionRepackage(passedArgs) {
        var _this = _super.call(this, passedArgs) || this;
        _this.description = "Repackage a VSTS extension with different settings.";
        _this.serverCommand = false;
        return _this;
    }
    ExtensionRepackage.prototype.getHelpArgs = function () {
        return ["vsix", "override", "overridesFile", "revVersion", "bypassValidation", "publisher", "extensionId", "outputPath"];
    };
    ExtensionRepackage.prototype.exec = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var vsixPath, overrides, _a, _b, _c, _d, _e, _f, argPublisher, argExtId, vsixData, vsixPackage, vsixManifestFileNames, vsixManifestAsJson, extensionId, extensionPublisher, extensionVersion;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0: return [4 /*yield*/, this.commandArgs.vsix.val()];
                    case 1:
                        vsixPath = _g.sent();
                        return [4 /*yield*/, this.commandArgs.override.val(true)];
                    case 2:
                        overrides = _g.sent();
                        if (!!overrides) return [3 /*break*/, 5];
                        _b = (_a = JSON).parse;
                        _e = (_d = qfs).readFile;
                        return [4 /*yield*/, this.commandArgs.overridesFile.val()[0]];
                    case 3: return [4 /*yield*/, _e.apply(_d, [_g.sent(), "utf8"])];
                    case 4:
                        overrides = _b.apply(_a, [_g.sent()]);
                        _g.label = 5;
                    case 5: return [4 /*yield*/, this.commandArgs.publisher.val(true)];
                    case 6:
                        argPublisher = _g.sent();
                        return [4 /*yield*/, this.commandArgs.extensionId.val(true)];
                    case 7:
                        argExtId = _g.sent();
                        return [4 /*yield*/, qfs.readFile(vsixPath[0])];
                    case 8:
                        vsixData = _g.sent();
                        vsixPackage = new zip(vsixData);
                        vsixManifestFileNames = Object.keys(vsixPackage.files).filter(function (key) { return _.endsWith(key, "vsixmanifest"); });
                        if (!(vsixManifestFileNames.length > 0)) return [3 /*break*/, 10];
                        return [4 /*yield*/, Q.nfcall(xml2js.parseString, vsixPackage.files[vsixManifestFileNames[0]].asText())];
                    case 9:
                        vsixManifestAsJson = _g.sent();
                        extensionId = _.get(vsixManifestAsJson, "PackageManifest.Metadata[0].Identity[0].$.Id");
                        extensionPublisher = _.get(vsixManifestAsJson, "PackageManifest.Metadata[0].Identity[0].$.Publisher");
                        extensionVersion = _.get(vsixManifestAsJson, "PackageManifest.Metadata[0].Identity[0].$.Version");
                        return [3 /*break*/, 11];
                    case 10: throw "Could not locate vsix manifest!";
                    case 11: return [2 /*return*/, this.getMergeSettings().then(function (mergeSettings) {
                            return _this.getPackageSettings().then(function (packageSettings) {
                                return createExtension(mergeSettings, packageSettings);
                            });
                        })];
                }
            });
        });
    };
    ExtensionRepackage.prototype.friendlyOutput = function (data) {
        trace.info(colors.green("\n=== Completed operation: repackage extension ==="));
        trace.info(" - VSIX: %s", data.path);
        trace.info(" - Extension ID: %s", data.extensionId);
        trace.info(" - Publisher: %s", data.publisher);
    };
    return ExtensionRepackage;
}(extBase.ExtensionBase));
exports.ExtensionRepackage = ExtensionRepackage;
//# sourceMappingURL=repackage.js.map